// Simple Parser Grammar for PEG.js
// ==========================
//
Parse
  = List
  / Expression

List "list"
  = head: '[' _? expr1:Expression _? tail: (',' _? exprt:Expression _?) * ']' {
  	const headStr = '[' + expr1
  	return '[' + expr1 + tail.reduce(function(result, element) {
      	return result + ', ' + element[2]
    }, '') + ']';
  }

Expression
  = head:Factor tail:(_? ("+" / "-" / "*" / "/") _? Factor)* {
      return tail.reduce(function(result, element) {
      	return result + element[1] + element[3]
    }, head);
  }


Factor
  = "(" _? expr:Expression _? ")" { return '(' + expr + ')'; }
  / Identifier
  / Number

Identifier "Identifier"
  = _ [a-zA-Z]+ { return text() + '_'; }

Number "Number"
  = _ [0-9]+ { return text(); }

_ "whitespace"
  = [ \t\n\r]*