{
	"id": 0,
	"name": "@design-automation/mobius-inline-funcs",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "InlineFuncs",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 387,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "new InlineFuncs",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 4,
									"name": "debug",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "InlineFuncs"
							}
						}
					]
				},
				{
					"id": 20,
					"name": "EUL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 411,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "EUL"
				},
				{
					"id": 6,
					"name": "PI",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 397,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "PI"
				},
				{
					"id": 21,
					"name": "PI2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 412,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "PI2"
				},
				{
					"id": 17,
					"name": "RX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 408,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TRay"
					},
					"defaultValue": "RX"
				},
				{
					"id": 18,
					"name": "RY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 409,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TRay"
					},
					"defaultValue": "RY"
				},
				{
					"id": 19,
					"name": "RZ",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 410,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TRay"
					},
					"defaultValue": "RZ"
				},
				{
					"id": 16,
					"name": "VO",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 407,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					},
					"defaultValue": "VO"
				},
				{
					"id": 13,
					"name": "VX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 404,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					},
					"defaultValue": "VX"
				},
				{
					"id": 14,
					"name": "VY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 405,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					},
					"defaultValue": "VY"
				},
				{
					"id": 15,
					"name": "VZ",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 406,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					},
					"defaultValue": "VZ"
				},
				{
					"id": 7,
					"name": "XY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 398,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "XY"
				},
				{
					"id": 8,
					"name": "XZ",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 399,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "XZ"
				},
				{
					"id": 9,
					"name": "YX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 400,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "YX"
				},
				{
					"id": 10,
					"name": "YZ",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 401,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "YZ"
				},
				{
					"id": 11,
					"name": "ZX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 402,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "ZX"
				},
				{
					"id": 12,
					"name": "ZY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 403,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "TPlane"
					},
					"defaultValue": "ZY"
				},
				{
					"id": 5,
					"name": "__debug__",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 386,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 501,
					"name": "_isWithin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1420,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 502,
							"name": "_isWithin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 503,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 504,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 505,
									"name": "v3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 22,
					"name": "abs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 416,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 23,
							"name": "abs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 24,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 432,
					"name": "acos",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1302,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 433,
							"name": "acos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 434,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 438,
					"name": "acosh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1316,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "acosh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 440,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 420,
					"name": "asin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1274,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 421,
							"name": "asin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 422,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 426,
					"name": "asinh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1288,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 427,
							"name": "asinh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 428,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 444,
					"name": "atan",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1330,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 445,
							"name": "atan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 446,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 447,
					"name": "atan2",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1337,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 448,
							"name": "atan2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 449,
									"name": "xy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "array",
												"elementType": {
													"type": "tuple",
													"elements": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 453,
					"name": "atanh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1351,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 454,
							"name": "atanh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 455,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 107,
					"name": "boolean",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 613,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 108,
							"name": "boolean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 109,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 55,
					"name": "ceil",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 499,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 56,
							"name": "ceil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 57,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 93,
					"name": "colFalse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 582,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "colFalse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 95,
									"name": "vals",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 96,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 97,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TColor"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TColor"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 104,
					"name": "colFromStr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 603,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 105,
							"name": "colFromStr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 106,
									"name": "col_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TColor"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TColor"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 98,
					"name": "colScale",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 592,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 99,
							"name": "colScale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 100,
									"name": "vals",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 101,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 102,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 103,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TColor"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TColor"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 593,
					"name": "copy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1585,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 594,
							"name": "copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 595,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 429,
					"name": "cos",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1295,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 430,
							"name": "cos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 431,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 435,
					"name": "cosh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1309,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "cosh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 437,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 28,
					"name": "cube",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 432,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 29,
							"name": "cube",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 30,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 119,
					"name": "degToRad",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 641,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 120,
							"name": "degToRad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 121,
									"name": "deg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 154,
					"name": "dictCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 714,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 155,
							"name": "dictCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 156,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					]
				},
				{
					"id": 157,
					"name": "dictEq",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 722,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 158,
							"name": "dictEq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 159,
									"name": "dict1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 160,
									"name": "dict2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "dictFind",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 706,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 151,
							"name": "dictFind",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 152,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 153,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 132,
					"name": "dictGet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 664,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "dictGet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 134,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 135,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 142,
					"name": "dictHasKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 689,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 143,
							"name": "dictHasKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 144,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 145,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 146,
					"name": "dictHasVal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 698,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 147,
							"name": "dictHasVal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 148,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 149,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 136,
					"name": "dictKeys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 673,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 137,
							"name": "dictKeys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 138,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 139,
					"name": "dictVals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 681,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 140,
							"name": "dictVals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 141,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 171,
					"name": "distance",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 751,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "distance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 173,
									"name": "c1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Txyz"
									}
								},
								{
									"id": 174,
									"name": "c2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "reference",
												"name": "TRay"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 175,
					"name": "distanceM",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 760,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 176,
							"name": "distanceM",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 177,
									"name": "c1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Txyz"
									}
								},
								{
									"id": 178,
									"name": "c2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "reference",
												"name": "TRay"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 179,
					"name": "distanceMS",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 769,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 180,
							"name": "distanceMS",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 181,
									"name": "c1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Txyz"
									}
								},
								{
									"id": 182,
									"name": "c2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "reference",
												"name": "TRay"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 596,
					"name": "equal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1589,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 597,
							"name": "equal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 598,
									"name": "data1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 599,
									"name": "data2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 38,
					"name": "exp",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 457,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "exp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 40,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 58,
					"name": "floor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 507,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "floor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 60,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 585,
					"name": "htmlColLeg",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1569,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 586,
							"name": "htmlColLeg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 587,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 588,
									"name": "labels",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 589,
									"name": "col_scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": "null"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 67,
					"name": "hypot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 531,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 68,
							"name": "hypot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 69,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 161,
					"name": "intersect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 733,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 162,
							"name": "intersect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 163,
									"name": "r1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TRay"
									}
								},
								{
									"id": 164,
									"name": "r2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"name": "TRay"
											}
										]
									}
								},
								{
									"id": 165,
									"name": "met",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						}
					]
				},
				{
					"id": 73,
					"name": "isApprox",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 547,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "isApprox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 75,
									"name": "n1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 76,
									"name": "n2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 77,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 465,
					"name": "isBool",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1372,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 466,
							"name": "isBool",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 467,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 483,
					"name": "isCol",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1396,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 484,
							"name": "isCol",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 485,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 474,
					"name": "isDict",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1384,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 475,
							"name": "isDict",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 476,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 462,
					"name": "isFlt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1368,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "isFlt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 464,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "isIn",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 557,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 79,
							"name": "isIn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 80,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 81,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 82,
									"name": "v3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 459,
					"name": "isInt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1364,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 460,
							"name": "isInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 461,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 471,
					"name": "isList",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1380,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 472,
							"name": "isList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 473,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 492,
					"name": "isNaN",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1408,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 493,
							"name": "isNaN",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 494,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 495,
					"name": "isNull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1412,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 496,
							"name": "isNull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 497,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 456,
					"name": "isNum",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1360,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 457,
							"name": "isNum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 458,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 489,
					"name": "isPln",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1404,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 490,
							"name": "isPln",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 491,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 486,
					"name": "isRay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1400,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 487,
							"name": "isRay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 488,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 468,
					"name": "isStr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1376,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 469,
							"name": "isStr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 470,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 498,
					"name": "isUndef",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1416,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 499,
							"name": "isUndef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 500,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 477,
					"name": "isVec2",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1388,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 478,
							"name": "isVec2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 479,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 480,
					"name": "isVec3",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1392,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 481,
							"name": "isVec3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 482,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 83,
					"name": "isWithin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 564,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 84,
							"name": "isWithin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 85,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 86,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 87,
									"name": "v3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 590,
					"name": "len",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1581,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 591,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 592,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 183,
					"name": "listCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 780,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 184,
							"name": "listCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 185,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 186,
					"name": "listCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 787,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "listCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 188,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 189,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 190,
					"name": "listCull",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 794,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 191,
							"name": "listCull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 192,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 193,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 194,
					"name": "listEq",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 802,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 195,
							"name": "listEq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 196,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 197,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 198,
					"name": "listFind",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 810,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 199,
							"name": "listFind",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 200,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 201,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 202,
					"name": "listFlat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 817,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 203,
							"name": "listFlat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 204,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 205,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 206,
					"name": "listGet",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 825,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 207,
							"name": "listGet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 208,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 209,
									"name": "idx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 210,
					"name": "listHas",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 833,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 211,
							"name": "listHas",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 212,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 213,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "undefined"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 214,
					"name": "listJoin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 840,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 215,
							"name": "listJoin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 216,
									"name": "lists",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 217,
					"name": "listRep",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 846,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 218,
							"name": "listRep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 219,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 220,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 221,
					"name": "listRev",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 853,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 222,
							"name": "listRev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 223,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 224,
					"name": "listRot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 860,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 225,
							"name": "listRot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 226,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 227,
									"name": "rot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 228,
					"name": "listSlice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 868,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 229,
							"name": "listSlice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 230,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 231,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 232,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 233,
					"name": "listSort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 877,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 234,
							"name": "listSort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 235,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 236,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 237,
					"name": "listZip",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 888,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 238,
							"name": "listZip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 239,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 41,
					"name": "log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 465,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 42,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 43,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 44,
					"name": "log10",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 473,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 45,
							"name": "log10",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 46,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 353,
					"name": "mad",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1138,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 354,
							"name": "mad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 355,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 350,
					"name": "max",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1131,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 351,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 352,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 356,
					"name": "mean",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1145,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 357,
							"name": "mean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 358,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 359,
					"name": "median",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1152,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 360,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 361,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 347,
					"name": "min",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1124,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 348,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 349,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 362,
					"name": "mode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1159,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 363,
							"name": "mode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 364,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 70,
					"name": "norm",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 539,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "norm",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 72,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 127,
					"name": "numToCurr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 655,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 128,
							"name": "numToCurr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 129,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 130,
									"name": "currency",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 131,
									"name": "locale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 122,
					"name": "numToStr",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 648,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 123,
							"name": "numToStr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 124,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 125,
									"name": "frac_digits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 126,
									"name": "locale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 110,
					"name": "number",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 620,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 111,
							"name": "number",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 112,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 250,
					"name": "plnCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 918,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 251,
							"name": "plnCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 252,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 278,
					"name": "plnFromRay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 981,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 279,
							"name": "plnFromRay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 280,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 262,
					"name": "plnLMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 945,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 263,
							"name": "plnLMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 264,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 265,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 266,
					"name": "plnLRotX",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 954,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 267,
							"name": "plnLRotX",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 268,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 269,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 270,
					"name": "plnLRotY",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 963,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 271,
							"name": "plnLRotY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 272,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 273,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 274,
					"name": "plnLRotZ",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 972,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 275,
							"name": "plnLRotZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 276,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 277,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 245,
					"name": "plnMake",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 908,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "plnMake",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 247,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 248,
									"name": "x_vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 249,
									"name": "xy_vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 253,
					"name": "plnMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 926,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 254,
							"name": "plnMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 255,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 256,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 257,
					"name": "plnRot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 935,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "plnRot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 259,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 260,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 261,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 31,
					"name": "pow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 440,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 32,
							"name": "pow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 33,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 34,
									"name": "xp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 64,
					"name": "prod",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 523,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "prod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 66,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 166,
					"name": "project",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 742,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 167,
							"name": "project",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 168,
									"name": "c",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Txyz"
									}
								},
								{
									"id": 169,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"name": "TRay"
											}
										]
									}
								},
								{
									"id": 170,
									"name": "met",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						}
					]
				},
				{
					"id": 116,
					"name": "radToDeg",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 634,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 117,
							"name": "radToDeg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 118,
									"name": "rad",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 281,
					"name": "rand",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 991,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 282,
							"name": "rand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 283,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 284,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 285,
									"name": "seed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 286,
					"name": "randInt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1000,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 287,
							"name": "randInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 288,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 289,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 290,
									"name": "seed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 291,
					"name": "randPick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1009,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 292,
							"name": "randPick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 293,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 294,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 295,
									"name": "seed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 240,
					"name": "range",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 896,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 241,
							"name": "range",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 242,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 243,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 244,
									"name": "step",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					]
				},
				{
					"id": 305,
					"name": "rayCopy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1035,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 306,
							"name": "rayCopy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 307,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 321,
					"name": "rayFromPln",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1064,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 322,
							"name": "rayFromPln",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 323,
									"name": "pln",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 301,
					"name": "rayFromTo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1028,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 302,
							"name": "rayFromTo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 303,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 304,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 328,
					"name": "rayGtoL",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1078,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 329,
							"name": "rayGtoL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 330,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 331,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 317,
					"name": "rayLMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1057,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 318,
							"name": "rayLMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 319,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 320,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 324,
					"name": "rayLtoG",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1071,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 325,
							"name": "rayLtoG",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 326,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 327,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 296,
					"name": "rayMake",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1021,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 297,
							"name": "rayMake",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 298,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 299,
									"name": "dir",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 300,
									"name": "len",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 308,
					"name": "rayMove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1043,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "rayMove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 310,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 311,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 312,
					"name": "rayRot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1050,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 313,
							"name": "rayRot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 314,
									"name": "ray1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 315,
									"name": "ray2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 316,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 88,
					"name": "remap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 570,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 89,
							"name": "remap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 90,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 91,
									"name": "d1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 92,
									"name": "d2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 47,
					"name": "round",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 481,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 48,
							"name": "round",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 49,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 50,
									"name": "dec_pla",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 343,
					"name": "setDif",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1113,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 344,
							"name": "setDif",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 345,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 346,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 339,
					"name": "setInt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1104,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 340,
							"name": "setInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 341,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 342,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 332,
					"name": "setMake",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1087,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 333,
							"name": "setMake",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 334,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 335,
					"name": "setUni",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1095,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 336,
							"name": "setUni",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 337,
									"name": "list1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 338,
									"name": "list2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 51,
					"name": "sigFig",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 490,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 52,
							"name": "sigFig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 53,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 54,
									"name": "sig_figs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 417,
					"name": "sin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1267,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 418,
							"name": "sin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 419,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 423,
					"name": "sinh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1281,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 424,
							"name": "sinh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 425,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 35,
					"name": "sqrt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 449,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 36,
							"name": "sqrt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 37,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 25,
					"name": "square",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 424,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 26,
							"name": "square",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 27,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 365,
					"name": "std",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1166,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 366,
							"name": "std",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 367,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 410,
					"name": "strEnds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1252,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 411,
							"name": "strEnds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 412,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 413,
									"name": "ends",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 379,
					"name": "strLow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1196,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 380,
							"name": "strLow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 381,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 391,
					"name": "strPadL",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1224,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 392,
							"name": "strPadL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 393,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 394,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 395,
									"name": "fill",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 396,
					"name": "strPadR",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1231,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 397,
							"name": "strPadR",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 398,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 399,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 400,
									"name": "fill",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 371,
					"name": "strRepl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1182,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 372,
							"name": "strRepl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 373,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 374,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 375,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 406,
					"name": "strStarts",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1245,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 407,
							"name": "strStarts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 408,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 409,
									"name": "starts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 401,
					"name": "strSub",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1238,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 402,
							"name": "strSub",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 403,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 404,
									"name": "from",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 405,
									"name": "length",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 414,
					"name": "strToJSON",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1258,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 415,
							"name": "strToJSON",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 416,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 382,
					"name": "strTrim",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1203,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 383,
							"name": "strTrim",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 384,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 388,
					"name": "strTrimL",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1217,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "strTrimL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 390,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 385,
					"name": "strTrimR",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1210,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 386,
							"name": "strTrimR",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 387,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 376,
					"name": "strUpp",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1189,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 377,
							"name": "strUpp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 378,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 113,
					"name": "string",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 627,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 114,
							"name": "string",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 115,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 61,
					"name": "sum",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 515,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 62,
							"name": "sum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 63,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 441,
					"name": "tan",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1323,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 442,
							"name": "tan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 443,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 450,
					"name": "tanh",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1344,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 451,
							"name": "tanh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 452,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 368,
					"name": "vari",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1173,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 369,
							"name": "vari",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 370,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 515,
					"name": "vecAdd",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1447,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 516,
							"name": "vecAdd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 517,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 518,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 519,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 545,
					"name": "vecAng",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1496,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 546,
							"name": "vecAng",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 547,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 548,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 558,
					"name": "vecAng2",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1517,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 559,
							"name": "vecAng2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 560,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 561,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 562,
									"name": "v3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 509,
					"name": "vecAvg",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1433,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 510,
							"name": "vecAvg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 511,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						}
					]
				},
				{
					"id": 512,
					"name": "vecAvgDir",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1440,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 513,
							"name": "vecAvgDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 514,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						}
					]
				},
				{
					"id": 541,
					"name": "vecCross",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1489,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 542,
							"name": "vecCross",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 543,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 544,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 525,
					"name": "vecDiv",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1461,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 526,
							"name": "vecDiv",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 527,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 528,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 537,
					"name": "vecDot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1482,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 538,
							"name": "vecDot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 539,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 540,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 553,
					"name": "vecEqual",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1510,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 554,
							"name": "vecEqual",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 555,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 556,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 557,
									"name": "tol",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 549,
					"name": "vecFromTo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1503,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 550,
							"name": "vecFromTo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 551,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 552,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 581,
					"name": "vecGtoL",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1560,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 582,
							"name": "vecGtoL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 583,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 584,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 568,
					"name": "vecLen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1531,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 569,
							"name": "vecLen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 570,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 577,
					"name": "vecLtoG",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1553,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 578,
							"name": "vecLtoG",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 579,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 580,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "TPlane"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 529,
					"name": "vecMult",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1468,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 530,
							"name": "vecMult",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 531,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 532,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 571,
					"name": "vecNorm",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1539,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 572,
							"name": "vecNorm",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 573,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 574,
					"name": "vecRev",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1546,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 575,
							"name": "vecRev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 576,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 563,
					"name": "vecRot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1524,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 564,
							"name": "vecRot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 565,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 566,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 567,
									"name": "ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 533,
					"name": "vecSetLen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1475,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 534,
							"name": "vecSetLen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 535,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 536,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 520,
					"name": "vecSub",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1454,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 521,
							"name": "vecSub",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 522,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 523,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 524,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 506,
					"name": "vecSum",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1426,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 507,
							"name": "vecSum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 508,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						20,
						6,
						21,
						17,
						18,
						19,
						16,
						13,
						14,
						15,
						7,
						8,
						9,
						10,
						11,
						12,
						5
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						501,
						22,
						432,
						438,
						420,
						426,
						444,
						447,
						453,
						107,
						55,
						93,
						104,
						98,
						593,
						429,
						435,
						28,
						119,
						154,
						157,
						150,
						132,
						142,
						146,
						136,
						139,
						171,
						175,
						179,
						596,
						38,
						58,
						585,
						67,
						161,
						73,
						465,
						483,
						474,
						462,
						78,
						459,
						471,
						492,
						495,
						456,
						489,
						486,
						468,
						498,
						477,
						480,
						83,
						590,
						183,
						186,
						190,
						194,
						198,
						202,
						206,
						210,
						214,
						217,
						221,
						224,
						228,
						233,
						237,
						41,
						44,
						353,
						350,
						356,
						359,
						347,
						362,
						70,
						127,
						122,
						110,
						250,
						278,
						262,
						266,
						270,
						274,
						245,
						253,
						257,
						31,
						64,
						166,
						116,
						281,
						286,
						291,
						240,
						305,
						321,
						301,
						328,
						317,
						324,
						296,
						308,
						312,
						88,
						47,
						343,
						339,
						332,
						335,
						51,
						417,
						423,
						35,
						25,
						365,
						410,
						379,
						391,
						396,
						371,
						406,
						401,
						414,
						382,
						388,
						385,
						376,
						113,
						61,
						441,
						450,
						368,
						515,
						545,
						558,
						509,
						512,
						541,
						525,
						537,
						553,
						549,
						581,
						568,
						577,
						529,
						571,
						574,
						563,
						533,
						520,
						506
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 385,
					"character": 13
				}
			]
		},
		{
			"id": 614,
			"name": "EUL",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "The mathematical constant E."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 10,
					"character": 13
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Math.E"
		},
		{
			"id": 600,
			"name": "PI",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "The mathematical constant PI, `3.141...`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 6,
					"character": 13
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Math.PI"
		},
		{
			"id": 615,
			"name": "PI2",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "PI * 2."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 14,
					"character": 13
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "..."
		},
		{
			"id": 611,
			"name": "RX",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A ray with an origin `[0, 0, 0]` and a direction `[1, 0, 0]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 65,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TRay"
			},
			"defaultValue": "XRAY"
		},
		{
			"id": 612,
			"name": "RY",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A ray with an origin `[0, 0, 0]` and a direction `[0, 1, 0]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 69,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TRay"
			},
			"defaultValue": "YRAY"
		},
		{
			"id": 613,
			"name": "RZ",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A ray with an origin `[0, 0, 0]` and a direction `[0, 0, 1]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 73,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TRay"
			},
			"defaultValue": "ZRAY"
		},
		{
			"id": 610,
			"name": "VO",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "An origin `[0,0,0]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 61,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "Txyz"
			},
			"defaultValue": "OVEC"
		},
		{
			"id": 607,
			"name": "VX",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A vector `[1,0,0]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 49,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "Txyz"
			},
			"defaultValue": "XVEC"
		},
		{
			"id": 608,
			"name": "VY",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A vector `[0,1,0]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 53,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "Txyz"
			},
			"defaultValue": "YVEC"
		},
		{
			"id": 609,
			"name": "VZ",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A vector `[0,0,1]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 57,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "Txyz"
			},
			"defaultValue": "ZVEC"
		},
		{
			"id": 601,
			"name": "XY",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the XY plane, i.e. `[[0, 0, 0],[1, 0, 0],[0, 1, 0]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 19,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "XYPLANE"
		},
		{
			"id": 602,
			"name": "XZ",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the XZ plane, i.e. `[[0, 0, 0],[1, 0, 0],[0, 0, 1]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 44,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "XZPLANE"
		},
		{
			"id": 603,
			"name": "YX",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the YX plane, i.e. `[[0, 0, 0],[0, 1, 0],[1, 0, 0]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 34,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "YXPLANE"
		},
		{
			"id": 604,
			"name": "YZ",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the YZ plane, i.e. `[[0, 0, 0],[0, 1, 0],[0, 0, 1]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 24,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "YZPLANE"
		},
		{
			"id": 605,
			"name": "ZX",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the ZX plane, i.e. `[[0, 0, 0],[0, 0, 1],[1, 0, 0]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 29,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "ZXPLANE"
		},
		{
			"id": 606,
			"name": "ZY",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A plane at the origin, aligned with the ZY plane, i.e. `[[0, 0, 0],[0, 0, 1],[0, 1, 0]]`."
			},
			"sources": [
				{
					"fileName": "inline/constants.ts",
					"line": 39,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"name": "TPlane"
			},
			"defaultValue": "ZYPLANE"
		},
		{
			"id": 1096,
			"name": "_isWithin",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/common.ts",
					"line": 7,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 1097,
					"name": "_isWithin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Needed for isCol"
					},
					"parameters": [
						{
							"id": 1098,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1099,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1100,
							"name": "v3",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 616,
			"name": "abs",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/abs.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 617,
					"name": "abs",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the absolute value of the given number.\n\\n\n```\nabs('-1');     // 1\nabs(-2);       // 2\nabs(null);     // 0\nabs('');       // 0\nabs([]);       // 0\nabs([2]);      // [2]\nabs([1,2]);    // [1,2]\nabs({});       // NaN\nabs('string'); // NaN\nabs();         // NaN\n```",
						"returns": "A number, list of numbers or NaN if invalid.\n\n"
					},
					"parameters": [
						{
							"id": 618,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1027,
			"name": "acos",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/acos.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1028,
					"name": "acos",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the arc-cosine (in radians) of the given number between -1 and 1; otherwise, NaN.\n\\n\n```\nacos(-2);  // NaN\nacos(-1);  // 3.141592653589793\nacos(0);   // 1.5707963267948966\nacos(0.5); // 1.0471975511965979\nacos(1);   // 0\nacos(2);   // NaN\n```",
						"returns": "A number, list of numbers or NaN.\n"
					},
					"parameters": [
						{
							"id": 1029,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers between -1 and 1."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1033,
			"name": "acosh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/acosh.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1034,
					"name": "acosh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic arc-cosine of the given number. If the number is less than 1, NaN.\n\\n\n```\nacosh(-1);  // NaN\nacosh(0);   // NaN\nacosh(0.5); // NaN\nacosh(1);   // 0\nacosh(2);   // 1.3169578969248166\n```",
						"returns": "A number, or NaN.\n"
					},
					"parameters": [
						{
							"id": 1035,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1015,
			"name": "asin",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/asin.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1016,
					"name": "asin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the arcsine (in radians) of the given number if it's between -1 and 1; otherwise, NaN.\n\\n\n```\nasin(-2);  // NaN\nasin(-1);  // -1.5707963267948966 (-pi/2)\nasin(0);   // 0\nasin(0.5); // 0.5235987755982989\nasin(1);   // 1.5707963267948966 (pi/2)\nasin(2);   // NaN\n```",
						"returns": "A number or list of numbers (in radians).\n"
					},
					"parameters": [
						{
							"id": 1017,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers between -1 and 1."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1021,
			"name": "asinh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/asinh.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1022,
					"name": "asinh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic arcsine of the given number.\n\\n\n```\nasinh(1);  // 0.881373587019543\nasinh(0);  // 0\n```",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1023,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1039,
			"name": "atan",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/atan.ts",
					"line": 17,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1040,
					"name": "atan",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the arc-tangent (in radians) of the given number.\n\\n\n```\natan(1);   // 0.7853981633974483\natan(0);   // 0\natan(-0);  // -0\natan(Infinity);   //  1.5707963267948966\natan(-Infinity);  // -1.5707963267948966\n```",
						"text": "// The angle that the line [(0,0);(x,y)] forms with the x-axis in a Cartesian coordinate system\natan(y / x);\n"
					},
					"parameters": [
						{
							"id": 1041,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers between -1 and 1.\n"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1042,
			"name": "atan2",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/atan2.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1043,
					"name": "atan2",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the angle in radians (in [-π,π]) between the positive x-axis and the ray from (0,0) to\nthe point.\n\\n\n```\natan2([15, 90]]); // 1.4056476493802699\natan2([90, 15]]); // 0.16514867741462683\n```",
						"returns": "A number (in radians).\n"
					},
					"parameters": [
						{
							"id": 1044,
							"name": "xy",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of two numbers [x,y] or a list of lists [[x,y], [x,y], [x,y]...]."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "tuple",
											"elements": [
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "intrinsic",
													"name": "number"
												}
											]
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1048,
			"name": "atanh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/atanh.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1049,
					"name": "atanh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic arc-tangent of the given number.\n\\n\n```\natanh(-2);  // NaN\natanh(-1);  // -Infinity\natanh(0);   // 0\natanh(0.5); // 0.5493061443340548\natanh(1);   // Infinity\natanh(2);   // NaN\n```",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1050,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 702,
			"name": "boolean",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/boolean.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 703,
					"name": "boolean",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a boolean or convert a string or number to a boolean.\n\\n\nIn case of a number, true is returned for non-zero numbers, and false in case of zero.\nStrings can be 'true' or 'false', or can contain a number.\nWhen value is a matrix, all elements will be converted to boolean.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 704,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A value of any type."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 649,
			"name": "ceil",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/ceil.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 650,
					"name": "ceil",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the smallest integer greater than or equal to the given number.\n```\nceil(.95);    // 1\nceil(4);      // 4\nceil(7.004);  // 8\nceil(-0.95);  // -0\nceil(-4);     // -4\nceil(-7.004); // -7\n```",
						"returns": "An integer or list of integers.\n"
					},
					"parameters": [
						{
							"id": 651,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 688,
			"name": "colFalse",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/colors/colFalse.ts",
					"line": 28,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 689,
					"name": "colFalse",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a colour from a value in the range between min and max.",
						"text": "Based on a \"false\" color scale,\nwhich is a gradient of colors with the following order:\n1. Red\n2. Orange\n3. Yellow\n4. Green\n5. Cyan\n6. Blue\n\nThe input number is measured as a percentage of the min/max scale,\nthen a color is returned depending on where the percentage lies on the color gradient.\n\n<a href=\"/editor?file=/assets/examples/Inline_Color_False.mob&node=1\" target=\"_blank\">See here for an example model.</a>\n",
						"returns": "A list of three numbers, `[r, g, b]`, in the range 0 to 1.\n"
					},
					"parameters": [
						{
							"id": 690,
							"name": "vals",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input number."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 691,
							"name": "min",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The smallest number of the scale."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 692,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The largest number of the scale."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TColor"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TColor"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 699,
			"name": "colFromStr",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/colors/colFromStr.ts",
					"line": 31,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 700,
					"name": "colFromStr",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a color from a string representation.",
						"text": "\\n\n\nExamples of color strings are as follows:\n\n- `colFromStr( \"rgb(255, 0, 0)`\" )`\n- `colFromStr( \"rgb(100%, 0%, 0%)`\" )`\n- `colFromStr( \"hsl(0, 100%, 50%)`\" )`\n- `colFromStr( \"#ff0000\" )`\n- `colFromStr( \"#FFAABB\" )`\n- `colFromStr( \"#f00\" )`\n- `colFromStr( \"skyblue\" )`\n- `colFromStr( \"Maroon\" )`\n- `colFromStr( \"MediumSeaGreen\" )`\n\nFor colour names, all 140 names are supported. See <a\nhref=\"https://www.w3schools.com/colors/colors_names.asp\" target=\"_blank\">w3schools</a>.\n\nIf the string cannot be interpreted as a color, then `[1, 1, 1]` is returned (i.e. white).\n\nThe function is overloaded. If you pass in a list of strings, it will return a list of colors.\n",
						"returns": "A list of three numbers, `[r, g, b]`, in the range 0 to 1.\n"
					},
					"parameters": [
						{
							"id": 701,
							"name": "col_str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TColor"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TColor"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 693,
			"name": "colScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/colors/colScale.ts",
					"line": 27,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 694,
					"name": "colScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a colour from a value in the range between min and max, given a Brewer scale or custom color scale.",
						"text": "The input number is measured as a percentage of the min/max scale, then a color is returned depending on where the percentage lies on the color gradient.\n\nUsing a Brewer scale would be similar to using `visualize.Gradient`, which comes preloaded with those scales.\nSee that function's drop-down menu for a list of valid Brewer scales.\n\nAccepted custom color inputs include:\n- Hex, as a string. <a href=\"https://www.w3schools.com/colors/colors_hexadecimal.asp\" target=\"_blank\">(w3schools hex builder)</a>\n- RGB255, as a list. <a href=\"https://www.w3schools.com/colors/colors_hexadecimal.asp\" target=\"_blank\">(w3schools RGB builder)</a>\n- Colors from X11 with no numbers, as a string. <a href=\"https://www.w3schools.com/colors/colors_x11.asp\" target=\"_blank\">(w3schools X11 list)</a>\n\n<a href=\"/editor?file=/assets/examples/Inline_Color_Scale.mob&node=1\" target=\"_blank\">See here for an example model.</a>\n",
						"returns": "A list of three numbers, `[r, g, b]`, in the range 0 to 1.\n"
					},
					"parameters": [
						{
							"id": 695,
							"name": "vals",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input number."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 696,
							"name": "min",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The smallest number of the scale."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 697,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The largest number of the scale."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 698,
							"name": "scale",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string representing a Brewer scale, or a list of strings representing a custom colour scale/gradient.\nThe order of colors in the gradient will follow the order of the list from left to right."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TColor"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TColor"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1180,
			"name": "copy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/common.ts",
					"line": 27,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 1181,
					"name": "copy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Makes a deep copy of a list or a dictionary.",
						"returns": "The deep copy.\n"
					},
					"parameters": [
						{
							"id": 1182,
							"name": "debug",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1183,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list or dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 1024,
			"name": "cos",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/cos.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1025,
					"name": "cos",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the cosine of the given number.\n\\n\n```\ncos(0);           // 1\ncos(1);           // 0.5403023058681398\ncos(PI);          // -1\ncos(2 * PI);      // 1\n```",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1026,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1030,
			"name": "cosh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/cosh.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1031,
					"name": "cosh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic cosine (in radians) of the given number.\n\\n\n```\ncosh(0); // 1\ncosh(1); // 1.5430806348152437\n```",
						"returns": "A number.\n"
					},
					"parameters": [
						{
							"id": 1032,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 622,
			"name": "cube",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/cube.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 623,
					"name": "cube",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the cube of the number.\n\\n\nIf the input is a list, the result will also be a list.\n\\n\n```\ncube([1, 2, 3, 4])   // [1, 8, 27, 64]\ncube(5)              // 125\n```",
						"returns": "A number or a list containing numbers.\n"
					},
					"parameters": [
						{
							"id": 624,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or a list containing numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 714,
			"name": "degToRad",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/degToRad.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 715,
					"name": "degToRad",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts degrees to radians.\n```\ndegToRad(45)   // 0.7853981633974483 (PI/4)\ndegToRad(180)  // 3.141592653589793 (PI)\n```",
						"returns": "A number (representing radians).\n"
					},
					"parameters": [
						{
							"id": 716,
							"name": "deg",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number (representing degrees)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 749,
			"name": "dictCopy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictCopy.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 750,
					"name": "dictCopy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a deep copy of the dictionary.\n\\n\nA deep copy means that changing values in the copied dictionary will not affect the original dictionary.",
						"returns": "The copied dictionary.\n"
					},
					"parameters": [
						{
							"id": 751,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			]
		},
		{
			"id": 752,
			"name": "dictEq",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictEq.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 753,
					"name": "dictEq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the values in the two dictionaries are equal.\n\\n\nPerforms a deep comparison between values to determine if they are equivalent.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 754,
							"name": "dict1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first dictionary."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 755,
							"name": "dict2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second dictionary."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 745,
			"name": "dictFind",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictFind.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 746,
					"name": "dictFind",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the first key in the dictionary that has the given value.\n\\n\nIf the value does not exist, returns null.",
						"returns": "The first key, or null.\n"
					},
					"parameters": [
						{
							"id": 747,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 748,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value, can be any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 727,
			"name": "dictGet",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictGet.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 728,
					"name": "dictGet",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the item in the dictionary specified by key.\n\\n\nIf the key does not exist, undefined is returned.\nIf a list of keys is provided, then a list of values will be returned.",
						"returns": "The value (or list of values) associated with the given key.\n"
					},
					"parameters": [
						{
							"id": 729,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 730,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key, either a single string or a list of strings."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 737,
			"name": "dictHasKey",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictHasKey.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 738,
					"name": "dictHasKey",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the dictionary contains the given key, false otherwise.\n\\n\nIf a list of keys is given, a list of true/false values will be returned.",
						"returns": "True or False, or a list of True/False values.\n"
					},
					"parameters": [
						{
							"id": 739,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 740,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The key, either a string or a list of strings."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 741,
			"name": "dictHasVal",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictHasVal.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 742,
					"name": "dictHasVal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the dictionary contains the given value, false otherwsie.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 743,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 744,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value to seach for, can be any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 731,
			"name": "dictKeys",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictKeys.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 732,
					"name": "dictKeys",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns an array of all the keys in a dictionary.\n\\n\n```\ndict1                   = {\"key1\": 1, \"key2\": 2}\ndictKeys(dict1)        \\\\ [\"key1\", \"key2\"]\n```",
						"returns": "A list.\n"
					},
					"parameters": [
						{
							"id": 733,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			]
		},
		{
			"id": 734,
			"name": "dictVals",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/dict/dictVals.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 735,
					"name": "dictVals",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns an array of all the values in a dictionary.\n\\n\n```\ndict1                   = {\"key1\": 1, \"key2\": 2}\ndictVals(dict1)        \\\\ [1, 2]\n```",
						"returns": "A list.\n"
					},
					"parameters": [
						{
							"id": 736,
							"name": "dict",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The dictionary."
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			]
		},
		{
			"id": 766,
			"name": "distance",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/geometry/distance.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 767,
					"name": "distance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "`b` can be an xyz, infinite ray or an infinite plane, such that the function calculates one of the following:\n\\n\n- Returns the Euclidean distance between two xyzs, a and b.\n- Returns the Euclidean distance between an xyz a and an infinite ray b.\n- Returns the Euclidean distance between an xyz a and an infinite plane b.",
						"returns": "A number, the distance.\n"
					},
					"parameters": [
						{
							"id": 768,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first xyz."
							},
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						},
						{
							"id": 769,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second xyz, an infinite ray, or an infinite plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "reference",
										"name": "TPlane"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 770,
			"name": "distanceM",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/geometry/distanceM.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 771,
					"name": "distanceM",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "`b` can be an xyz, infinite ray or an infinite plane, such that the function calculates one of the following:\n\\n\n- Returns the Manhattan distance between two xyzs, a and b.\n- Returns the Manhattan distance between an xyz a and an infinite ray b.\n- Returns the Manhattan distance between an xyz a and an infinite plane b.\n\\n\n<a href=\"https://www.omnicalculator.com/math/manhattan-distance#what-is-the-manhattan-distance\" target=\"_blank\"> See here for an explanation on the Manhattan distance. </a>",
						"returns": "A number, the Manhattan distance between the points.\n"
					},
					"parameters": [
						{
							"id": 772,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first xyz."
							},
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						},
						{
							"id": 773,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second xyz, an infinite ray, or an infinite plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "reference",
										"name": "TPlane"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 774,
			"name": "distanceMS",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/geometry/distanceMS.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 775,
					"name": "distanceMS",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "`b` can be an xyz, infinite ray or an infinite plane, such that the function calculates one of the following:\n\\n\n- Returns the Manhattan squared distance between two xyzs, a and b.\n- Returns the Manhattan squared distance between an xyz a and an infinite ray b.\n- Returns the Manhattan squared distance between an xyz a and an infinite plane b.\n\\n\n<a href=\"https://www.omnicalculator.com/math/manhattan-distance#what-is-the-manhattan-distance\" target=\"_blank\"> See here for an explanation on the Manhattan distance. </a>",
						"returns": "A number. The Manhattan squared distance between the points.\n"
					},
					"parameters": [
						{
							"id": 776,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first point/position."
							},
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						},
						{
							"id": 777,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second point/position."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "reference",
										"name": "TPlane"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 1184,
			"name": "equal",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/common.ts",
					"line": 40,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 1185,
					"name": "equal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true of the two lists or dictionaries are equal.\nPerforms a deep comparison between values to determine if they are equivalent.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1186,
							"name": "debug",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1187,
							"name": "data1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1188,
							"name": "data2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 632,
			"name": "exp",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/exp.ts",
					"line": 7,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 633,
					"name": "exp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a number representing e raised to the power of x, where e is Euler's number and x is the argument.",
						"returns": "A number or a list of numbers.\n"
					},
					"parameters": [
						{
							"id": 634,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 652,
			"name": "floor",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/floor.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 653,
					"name": "floor",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the largest integer less than or equal to the specified number.\n```\nfloor( 45.95); //  45\nfloor( 45.05); //  45\nfloor(  4   ); //   4\nfloor(-45.05); // -46\nfloor(-45.95); // -46\n```",
						"returns": "An integer or list of integers.\n"
					},
					"parameters": [
						{
							"id": 654,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1193,
			"name": "htmlColLeg",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/html/htmlColLeg.ts",
					"line": 10,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 1194,
					"name": "htmlColLeg",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns an html string representing a color legend.",
						"returns": "An html string.\n"
					},
					"parameters": [
						{
							"id": 1195,
							"name": "size",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Either height, or [width, height] in pixels."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								]
							}
						},
						{
							"id": 1196,
							"name": "labels",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of strings, which will be added as labels on the right side."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1197,
							"name": "col_scale",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "(optional) A color scale, e.g. ['blue', 'green']"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "null"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 661,
			"name": "hypot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/hypot.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 662,
					"name": "hypot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hypotenuse (square root of the sum of squares and its arguments) of all values in a list.",
						"returns": "A number (The hypotenuse).\n"
					},
					"parameters": [
						{
							"id": 663,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list containing numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 756,
			"name": "intersect",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/geometry/intersect.ts",
					"line": 26,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 757,
					"name": "intersect",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the intersection xyz between two rays or a ray and a plane, where...\n\\n\n- `intersect(r1, r2)`, Returns the intersection xyz between two infinite rays.\n- `intersect(r1, r2, m)`, Returns the intersection xyz between two rays, where:\n     - if `m=2`, rays are infinite in both directions\n     - if `m=1` rays are infinite in one direction\n     - if `m=0`, rays are not infinite.\n\\n\n- `intersect(r, p)`, Returns the intersection xyz between an infinite ray r and an infinite plane p,\n- `intersect(r, p, m)`, Returns the intersection xyz between a ray r and an infinite plane p, where:\n     - if `m=2`, the ray is infinite in both directions,\n     - if `m=1` the ray is infinite in one direction,\n     - and if `m=0`, the ray is not infinite.",
						"returns": "The xyz coordinates of the intersection between two rays.\n"
					},
					"parameters": [
						{
							"id": 758,
							"name": "r1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first ray."
							},
							"type": {
								"type": "reference",
								"name": "TRay"
							}
						},
						{
							"id": 759,
							"name": "r2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second ray or plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "reference",
										"name": "TPlane"
									}
								]
							}
						},
						{
							"id": 760,
							"name": "met",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "(Optional) Creates certain conditions, as seen above."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "2"
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					}
				}
			]
		},
		{
			"id": 668,
			"name": "isApprox",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/isApprox.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 669,
					"name": "isApprox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the absolute difference between the two numbers is less than the tolerance, t.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 670,
							"name": "n1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first number."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 671,
							"name": "n2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second number."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 672,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The tolerance, a number."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1060,
			"name": "isBool",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isBool.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1061,
					"name": "isBool",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a boolean, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1062,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1078,
			"name": "isCol",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isCol.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1079,
					"name": "isCol",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a list of three numbers in the range [0, 1], false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1080,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1069,
			"name": "isDict",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isDict.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1070,
					"name": "isDict",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a dictionary, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1071,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1057,
			"name": "isFlt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isFlt.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1058,
					"name": "isFlt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a floating point number, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1059,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 673,
			"name": "isIn",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/isIn.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 674,
					"name": "isIn",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns v1 < v2 < v3 (True/False).",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 675,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 676,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 677,
							"name": "v3",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The third value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1054,
			"name": "isInt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isInt.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1055,
					"name": "isInt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a integer, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1056,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1066,
			"name": "isList",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isList.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1067,
					"name": "isList",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a list, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1068,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1087,
			"name": "isNaN",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isNaN.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1088,
					"name": "isNaN",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true is the value is not a number (NaN), false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1089,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1090,
			"name": "isNull",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isNull.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1091,
					"name": "isNull",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true is the value is null, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1092,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1051,
			"name": "isNum",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isNum.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1052,
					"name": "isNum",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a number, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1053,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1084,
			"name": "isPln",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isPln.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1085,
					"name": "isPln",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a plane, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1086,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1081,
			"name": "isRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isRay.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1082,
					"name": "isRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a ray, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1083,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1063,
			"name": "isStr",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isStr.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1064,
					"name": "isStr",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a string, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1065,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1093,
			"name": "isUndef",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isUndef.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1094,
					"name": "isUndef",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true is the value is undefined, false otherwise."
					},
					"parameters": [
						{
							"id": 1095,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked.\n\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1072,
			"name": "isVec2",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isVec2.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1073,
					"name": "isVec2",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a list of two numbers, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1074,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1075,
			"name": "isVec3",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/types/isVec3.ts",
					"line": 6,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1076,
					"name": "isVec3",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the value is a list of three numbers, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1077,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Value to be checked."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 678,
			"name": "isWithin",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/isWithin.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 679,
					"name": "isWithin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns v1 <= v2 <= v3 (True/False).",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 680,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 681,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 682,
							"name": "v3",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The third value."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1189,
			"name": "len",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/common.ts",
					"line": 15,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 1190,
					"name": "len",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the number of items in a list, a dictionary, or a string.",
						"returns": "An integer.\n"
					},
					"parameters": [
						{
							"id": 1191,
							"name": "debug",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1192,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list, dictionary, or string."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 778,
			"name": "listCopy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listCopy.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 779,
					"name": "listCopy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a shallow copy of the list.\n\\n\nA shallow copy means that changing primitive entities (e.g. numbers, strings) in the\ncopied list will not affect the original list.",
						"returns": "The copy of the list.\n"
					},
					"parameters": [
						{
							"id": 780,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 781,
			"name": "listCount",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listCount.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 782,
					"name": "listCount",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the number of times the value is in the list.",
						"returns": "An integer.\n"
					},
					"parameters": [
						{
							"id": 783,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 784,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value, can be any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 785,
			"name": "listCull",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listCull.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 786,
					"name": "listCull",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list of all the values that evaluate to true.",
						"text": "If the second argument is provided, then it returns a new list of all the values in list1 that\nevaluates to true in list2.\n",
						"returns": "A new list.\n"
					},
					"parameters": [
						{
							"id": 787,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 788,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A list of values, to be used to cull the first list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 789,
			"name": "listEq",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listEq.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 790,
					"name": "listEq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the values in the two lists are equal.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 791,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 792,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 793,
			"name": "listFind",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listFind.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 794,
					"name": "listFind",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the index of the first occurence of the value in the list.",
						"text": "If the value does not exist, returns null.\n",
						"returns": "The index of the first occurence of the value (an integer), or null.\n"
					},
					"parameters": [
						{
							"id": 795,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 796,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value, can be of any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 797,
			"name": "listFlat",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listFlat.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 798,
					"name": "listFlat",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a flattened copy of the list. If the input list has lists nested within it, the values of\nthe nested lists will be unnested.",
						"text": "If no depth is specified, then it is flattened by the maximum amount.\n```\nlistFlat([1,2,3,[4,[5],6],7])           // [1, 2, 3, 4, 5, 6, 7]\nlistFlat([1,2,3,[4,[5, [6] ], 7] ], 1)  // [1,2,3,4, [5, [6]], 7]\n```",
						"returns": "The flattened list.\n"
					},
					"parameters": [
						{
							"id": 799,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 800,
							"name": "depth",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) The depth to flatten to, an integer."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 801,
			"name": "listGet",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listGet.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 802,
					"name": "listGet",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the item in the list specified by index, either a positive or negative integer.\nIf the index is larger than the size of the list, `undefined` is returned.",
						"text": "```\nlistGet([5,6,7,8,9], [1,2,3])            // [6, 7, 8]\nlistGet([0,1,2,3,4], -2)                 // 3\nlistGet(listGet([0, [1, 2, 3] ], 1), 2)  // 2\n```\n",
						"returns": "The specified item, or list of items.\n"
					},
					"parameters": [
						{
							"id": 803,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 804,
							"name": "idx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The index, an integer or a list of integers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 805,
			"name": "listHas",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listHas.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 806,
					"name": "listHas",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the list contains the value, false otherwise.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 807,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 808,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The value, can be any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 809,
			"name": "listJoin",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listJoin.ts",
					"line": 23,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 810,
					"name": "listJoin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Joins two or more lists into a single list.",
						"text": "If the arguments are not lists, then they will be converted into lists.\n\nThis functions accepts any number of arguments. The values in the lists can have any datatype.\n",
						"returns": "The combined list.",
						"tags": [
							{
								"tag": "example",
								"text": "`list = listJoin([1, 2], [3, 4], [5, 6])`"
							},
							{
								"tag": "example_info",
								"text": "Returns `[1, 2, 3, 4, 5, 6]`.\n"
							},
							{
								"tag": "example",
								"text": "`list = listJoin([1, 2, 3], 4)`"
							},
							{
								"tag": "example_info",
								"text": "Returns `[1, 2, 3, 4]`.\n"
							},
							{
								"tag": "example",
								"text": "`list = listJoin(1, 2, 3)`"
							},
							{
								"tag": "example_info",
								"text": "Returns `[1, 2, 3]`.\n"
							},
							{
								"tag": "example",
								"text": "`list = listJoin(1, [2, 3], [[4, 5, 6]])`"
							},
							{
								"tag": "example_info",
								"text": "Returns `[1, 2, 3, [4, 5, 6]]`.\n"
							}
						]
					},
					"parameters": [
						{
							"id": 811,
							"name": "lists",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"shortText": "Multiple lists."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 812,
			"name": "listRep",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listRep.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 813,
					"name": "listRep",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list that repeats the contents of the input list n times.",
						"returns": "A new list.\n"
					},
					"parameters": [
						{
							"id": 814,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 815,
							"name": "n",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer. The number of repetitons."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 816,
			"name": "listRev",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listRev.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 817,
					"name": "listRev",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new list, with the items in reverse order.",
						"returns": "A new list.\n"
					},
					"parameters": [
						{
							"id": 818,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list to reverse."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 819,
			"name": "listRot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listRot.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 820,
					"name": "listRot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Return a list that is rotated, i.e. items from the end of the list are moved to the start of the list.\nFor a positive rotation, items are moved from the end to the start of the list.\nFor a negative rotation, items are moved from the start to the end of the list.",
						"returns": "The rotated list.\n"
					},
					"parameters": [
						{
							"id": 821,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 822,
							"name": "rot",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The number of items to rotate, an integer."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 823,
			"name": "listSlice",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listSlice.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 824,
					"name": "listSlice",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Return a sub-list from the list.",
						"returns": "The sub-list.\n"
					},
					"parameters": [
						{
							"id": 825,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 826,
							"name": "start",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The start index of the slice operation, an integer."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 827,
							"name": "end",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) The end index of the slice operation, an integer. Defaults to the length of the list."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 828,
			"name": "listSort",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listSort.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 829,
					"name": "listSort",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new list, with the items in sorted order.",
						"text": "If no second argument is provided, then the list is sorted in ascending order.\n\nIf a second argument is provided, then it should be a list of the same length as the first argument.\nIn this case, the first list is sorted according to ascending order of the values in the second list.\n",
						"returns": "A new list.\n"
					},
					"parameters": [
						{
							"id": 830,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 831,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A list indicating the order to sort list 1 in."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 832,
			"name": "listZip",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/listZip.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 833,
					"name": "listZip",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts a set of lists from rows into columns.",
						"text": "If no second argument is provided, it assumes the first argument consists of a list of lists.\n\nIf a second argument is provided, then it should be a list of the same length as the first argument.\nIn this case, the items in the first and second lists are reaarranged to generate a new set of lists.\n\nThis function also accepts additional lists of arguments.\n",
						"returns": "A new list.\n"
					},
					"parameters": [
						{
							"id": 834,
							"name": "lists",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"shortText": "The list of lists, or first row list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 635,
			"name": "log",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/log.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 636,
					"name": "log",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the natural logarithm (base e) of the given number or list of numbers. If the number is negative, NaN is returned.\n\\n\nIf a custom base is needed, using `log(y) / log(x)` will return the logarithm of `y` with base `x`. (log x (y))\n\\n\n```\nlog(-1);  // NaN, out of range\nlog(0);   // -Infinity\nlog(1);   // 0\nlog(10);  // 2.302585092994046\n```",
						"returns": "A number, list of numbers, `Infinity` or `NaN`.\n"
					},
					"parameters": [
						{
							"id": 637,
							"name": "base",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 638,
			"name": "log10",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/log10.ts",
					"line": 17,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 639,
					"name": "log10",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the base 10 logarithm of the given number or list of numbers. If the number is negative, NaN is returned.\n\\n\nIf a custom base is needed, using `log10(y) / log10(x)` will return the logarithm of `y` with base `x`. (log x (y))\n\\n\n```\nMath.log10(2);       // 0.3010299956639812\nMath.log10(1);       // 0\nMath.log10(0);       // -Infinity\nMath.log10(-2);      // NaN\nMath.log10(100000);  // 5\n```",
						"returns": "A number, list of numbers, `Infinity` or `NaN`.\n"
					},
					"parameters": [
						{
							"id": 640,
							"name": "base",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 948,
			"name": "mad",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/mad.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 949,
					"name": "mad",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the median absolute deviation of the list.\n\\n\n```\nmad(10, 20, 30)             // returns 10\nmad([1, 2, 3])              // returns 1\nmad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n```",
						"returns": "A number (The median absolute deviation).\n"
					},
					"parameters": [
						{
							"id": 950,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 945,
			"name": "max",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/max.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 946,
					"name": "max",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the largest of the given numbers.",
						"text": "If any one or more of the parameters cannot be converted into a number, NaN is returned.\n```\nmax([5,3,6,2,4])    // 6\n```",
						"returns": "A number.\n"
					},
					"parameters": [
						{
							"id": 947,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of numbers, or a sequence of numbers."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 951,
			"name": "mean",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/mean.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 952,
					"name": "mean",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the mean value of the list.\n\\n\n```\nmean([1, 2.7, 3.2, 4])               // returns 2.725\n```\nIf the list contains sublists, then the returned list will have the same number of sublists.",
						"returns": "A number (The mean).\n"
					},
					"parameters": [
						{
							"id": 953,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 954,
			"name": "median",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/median.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 955,
					"name": "median",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the median of the list.\n\\n\n```\nmedian([5, 2, 7])        // returns 5\nmedian([3, -1, 5, 7])    // returns 4\n```",
						"returns": "A number (The median).\n"
					},
					"parameters": [
						{
							"id": 956,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 942,
			"name": "min",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/min.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 943,
					"name": "min",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the smallest of the given numbers.\n\\n\nIf any one or more of the parameters cannot be converted into a number, NaN is returned.\n\\n\nIf no parameters are provided, Infinity is returned.\n\\n\n```\nmin([5,3,6,2,4])    // 2\nmin([10, 20, 30])   // 10\n```",
						"returns": "A number or a list of numbers.\n"
					},
					"parameters": [
						{
							"id": 944,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of numbers, or a sequence of numbers."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 957,
			"name": "mode",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/mode.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 958,
					"name": "mode",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the mode of the list.\n\\n\n```\nmode([2, 1, 4, 3, 1])               // returns [1]\nmode([1, 2.7, 3.2, 4, 2.7])         // returns [2.7]\nmode([1, 4, 6, 1, 6])               // returns [1, 6]\nmode(['a','a','b','c'])             // returns [\"a\"]\nmode([1, 1.5, 'abc'])               // returns [1, 1.5, \"abc\"]\n```",
						"returns": "A list (The mode).\n"
					},
					"parameters": [
						{
							"id": 959,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing any values."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 664,
			"name": "norm",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/norm.ts",
					"line": 28,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 665,
					"name": "norm",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the norm of a number or list of numbers. The norm of a mathematical object is a quantity\nthat generally describes the length, size, or extent of the object.\n\\n\nThe norm (length) of a vector should not be confused with a normal vector (a vector perpendicular\nto a surface).",
						"text": "```\nnorm(-3.5)                        // returns 3.5\n\nnorm([1, 2, -3], Infinity)        // returns 3\nnorm([1, 2, -3], -Infinity)       // returns 1\nnorm([3, 4], 2)                   // returns 5\n\nnorm([[1, 2], [3, 4]], 1)         // returns 6\n```\n`p`: A vector space is a set that is closed under finite vector addition and scalar\nmultiplication. The basic example is `n`-dimensional Euclidean space, ie. by default, this\nfunction will calculate the length of the input in 2D space.\n",
						"returns": "A number (The norm).\n"
					},
					"parameters": [
						{
							"id": 666,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 667,
							"name": "p",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) Vector space, a number. Its default value is 2.\nOther supported numbers include `Infinity` and `-Infinity`."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 722,
			"name": "numToCurr",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/numToCurr.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 723,
					"name": "numToCurr",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts the number to a string representing currency, with numbers formatted based on locale.\n```\nnumToCurr(232.4, \"Usd\", \"en-AU\")       // USD 232.40\nnumToCurr(1000000000, \"sgd\", \"en-GB\")  // SGD 1,000,000,000.00\nnumToCurr(10, \"EUR\")                   // €10.00\n```\nSee <a href=\"https://www.w3schools.com/jsref/jsref_tolocalestring_number.asp\" target=\"_blank\">\nw3schools' full list of locales.</a>",
						"returns": "A string.\n"
					},
					"parameters": [
						{
							"id": 724,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number (with decimals) or an integer."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 725,
							"name": "currency",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string of 3 letters to indicate the desired currency. The letters will be converted to uppercase."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 726,
							"name": "locale",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A locale in the form of a string."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 717,
			"name": "numToStr",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/numToStr.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 718,
					"name": "numToStr",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts the number to a string, with commas, e.g. 1,234,567",
						"text": "If frac_digits is set: Converts the number to a string, with commas, where \"d\" specifies the\nnumber of fraction digits, e.g. 1,234.00.\nIf locale is set: Converts the number to a string, where \"d\" specifies the number of fraction\ndigits, and \"l\" specifies the locale, e.g. \"en-GB\", \"fi-FI\", \"in-IN\", \"pt-BR\", etc.\nSee <a href=\"https://www.w3schools.com/jsref/jsref_tolocalestring_number.asp\" target=\"_blank\">\nw3schools' full list of locales.</a>\n",
						"returns": "A string.\n"
					},
					"parameters": [
						{
							"id": 719,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number (with decimals) or an integer."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 720,
							"name": "frac_digits",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) An integer specifying the number of fraction digits."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 721,
							"name": "locale",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A locale in the form of a string."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 705,
			"name": "number",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/number.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 706,
					"name": "number",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a number or convert a string, boolean, or unit to a number.\nWhen value is a matrix, all elements will be converted to numbers.",
						"returns": "A number/numbers.\n"
					},
					"parameters": [
						{
							"id": 707,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A value of any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 845,
			"name": "plnCopy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnCopy.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 846,
					"name": "plnCopy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Make a copy of the plane \"pln\".",
						"text": "Overloaded. pln can be one plane or a list of planes.\n",
						"returns": "The copied plane.\n"
					},
					"parameters": [
						{
							"id": 847,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The plane to be copied."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 873,
			"name": "plnFromRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnFromRay.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 874,
					"name": "plnFromRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generate a plane from a ray. The plane is perpendicular to the ray,\nand the origin of the plane will be the same as the ray.",
						"text": "Overloaded. ray can be one ray or a list of rays.\n",
						"returns": "A plane or list of planes.\n"
					},
					"parameters": [
						{
							"id": 875,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input ray (or list of rays) to generate a plane (or list of planes) from."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 857,
			"name": "plnLMove",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnLMove.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 858,
					"name": "plnLMove",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Move the plane \"p\" relative to the local X, Y, and Z axes, by vector \"v\".\n\\n\nOverloaded with 3 cases.\n\\n\n- pln can be one plane, and vec can be one vector.\n- pln can be a list of planes, and vec can be one vector.\n- pln can be a list of planes, and vec can be a list of vectors. These lists should have the **same size**.",
						"returns": "The new, moved plane.\n"
					},
					"parameters": [
						{
							"id": 859,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The plane to be moved."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 860,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector to move the plane by."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 861,
			"name": "plnLRotX",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnLRotX.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 862,
					"name": "plnLRotX",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotate the plane \"p\" around the local X axis, by angle \"a\" (in radians).\n\\n\nCan be overloaded.",
						"returns": "The new, rotated plane.\n"
					},
					"parameters": [
						{
							"id": 863,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Plane to be rotated (around the X axis)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 864,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Angle to rotate plane by, in radians."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 865,
			"name": "plnLRotY",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnLRotY.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 866,
					"name": "plnLRotY",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotate the plane \"p\" around the local Y axis, by angle \"a\" (in radians).\n\\n\nOverloaded with 3 cases.\n\\n\n- pln can be one plane, and ang can be one number.\n- pln can be a list of planes, and ang can be one number.\n- pln can be a list of planes, and ang can be a list of numbers. These lists should have the **same size**.",
						"returns": "The new, rotated plane.\n\n"
					},
					"parameters": [
						{
							"id": 867,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Plane to be rotated (around the Y axis)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 868,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Angle to rotate plane by, in radians."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 869,
			"name": "plnLRotZ",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnLRotZ.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 870,
					"name": "plnLRotZ",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotate the plane \"p\" around the local Z axis, by angle \"a\" (in radians).\n\\n\nOverloaded with 3 cases.\n\\n\n- pln can be one plane, and ang can be one number.\n- pln can be a list of planes, and ang can be one number.\n- pln can be a list of planes, and ang can be a list of numbers. These lists should have the **same size**.",
						"returns": "The new, rotated plane.\n"
					},
					"parameters": [
						{
							"id": 871,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Plane to be rotated (around the Z axis)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 872,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Angle to rotate plane by, in radians."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 840,
			"name": "plnMake",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnMake.ts",
					"line": 20,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 841,
					"name": "plnMake",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a plane from an origin \"o\", an \"x\" axis vector, and any other vector in the \"xy\" plane.\n\\n\nOverloaded with 4 cases.\n\\n\n- origin can be one coordinate, x_vec can be one vector, and xy_vec can be one vector.\n- origin can be a list of coordinates, x_vec can be one vector, and xy_vec can be one vector.\n- origin can be a list of coordinates, x_vec can be a list of vectors, and xy_vec can be one vector. These lists should have the **same size**.\n- origin can be a list of coordinates, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "A plane.\n"
					},
					"parameters": [
						{
							"id": 842,
							"name": "origin",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A point/position or list of points/positions."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 843,
							"name": "x_vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A vector or a list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 844,
							"name": "xy_vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Another vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 848,
			"name": "plnMove",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnMove.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 849,
					"name": "plnMove",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Move the plane \"p\" relative to the global X, Y, and Z axes, by vector \"v\".\n\\n\nOverloaded with 3 cases.\n\\n\n- pln can be one plane, and vec can be one vector.\n- pln can be a list of planes, and vec can be one vector.\n- pln can be a list of planes, and vec can be a list of vectors. These lists should have the **same size**.",
						"returns": "A new plane that has been moved.\n"
					},
					"parameters": [
						{
							"id": 850,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The plane to be moved."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 851,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector to move the plane by."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 852,
			"name": "plnRot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/plane/plnRot.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 853,
					"name": "plnRot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotate the plane \"p\" around the ray \"r\", by angle \"a\" (in radians).\n\\n\nOverloaded with 3 cases.\n\\n\n- pln can be one plane, ray can be one ray, and ang can be one number.\n- pln can be a list of planes, ray can be one ray, and ang can be one number.\n- pln can be a list of planes, ray can be a list of rays, and ang can be a list of numbers. These lists should have the **same size**.",
						"returns": "A new, rotated plane.\n"
					},
					"parameters": [
						{
							"id": 854,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The plane to be rotated."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						},
						{
							"id": 855,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to rotate the plane around."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 856,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The angle to rotate the plane, in radians."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TPlane"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TPlane"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 625,
			"name": "pow",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/pow.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 626,
					"name": "pow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a number representing the given base taken to the power of the given exponent.\n\\n\n```\npow(7, 2);    // 49\npow(4, 0.5);  // 2 (square root of 4)\npow(8, -1/3); // 0.5\npow(-7, 2);   // 49 (squares are positive)\npow(-7, 3);   // -343 (cubes can be negative)",
						"text": "pow(-7, 0.5); // NaN (negative numbers don't have a real square root)\npow(-7, 1/3); // NaN (negative bases with fractional exponents always return NaN)\n```\n",
						"returns": "A number or a list of numbers.\n"
					},
					"parameters": [
						{
							"id": 627,
							"name": "base",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 628,
							"name": "xp",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number, the exponent used to raise the base."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 658,
			"name": "prod",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/prod.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 659,
					"name": "prod",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the product of all values in a list.\n\\n\n```\nprod([2, 3])             // 6\nprod([2, 3, 4])          // 24\nprod([[2, 5], [4, 3]])   // 120\n```",
						"returns": "A number (The total product).\n"
					},
					"parameters": [
						{
							"id": 660,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 761,
			"name": "project",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/geometry/project.ts",
					"line": 20,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 762,
					"name": "project",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the xyz from projecting an xyz c onto an infinite ray r or infinite plane p where...\n\\n\n- `project(c, r)`, Returns the xyz from projecting an xyz c onto an infinite ray r,\n- `project(c, r, m)`, Returns the xyz from projecting an xyz c onto an infinite ray r, where:\n     - if `m=2`, the ray is infinite in both directions,\n     - if `m=1`, the ray is infinite in one direction,\n     - and if `m=0`, the ray is not infinite.\n- `project(c, p)`, Returns the xyz from projecting an xyz c onto an infinite plane p.",
						"returns": "An xyz coordinate.\n"
					},
					"parameters": [
						{
							"id": 763,
							"name": "c",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An xyz coordinate."
							},
							"type": {
								"type": "reference",
								"name": "Txyz"
							}
						},
						{
							"id": 764,
							"name": "r",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A ray or a plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "reference",
										"name": "TPlane"
									}
								]
							}
						},
						{
							"id": 765,
							"name": "met",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "(Optional) Creates certain conditions, as seen above."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "2"
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					}
				}
			]
		},
		{
			"id": 711,
			"name": "radToDeg",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/radToDeg.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 712,
					"name": "radToDeg",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts radians to degrees.\n```\nradToDeg(PI)         // 180\nradToDeg(PI / 2)     // 90\n```",
						"returns": "A number (representing degrees).\n"
					},
					"parameters": [
						{
							"id": 713,
							"name": "rad",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number (representing radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 876,
			"name": "rand",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/rand/rand.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 877,
					"name": "rand",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a random number in the specified range.\nIf `seed` is set: Returns a random number (with decimals) in the specified range, given a numeric seed.",
						"returns": "A number (with decimals).\n"
					},
					"parameters": [
						{
							"id": 878,
							"name": "min",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The minimum number (inclusive)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 879,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The maximum number (exclusive)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 880,
							"name": "seed",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) If a seed is given, the result will be the same for the same seed."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 881,
			"name": "randInt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/rand/randInt.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 882,
					"name": "randInt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a random integer in the specified range.\nIf `seed` is set: Returns a random integer in the specified range, given a numeric seed.",
						"returns": "An integer.\n"
					},
					"parameters": [
						{
							"id": 883,
							"name": "min",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The minimum integer (inclusive)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 884,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The maximum integer (exclusive)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 885,
							"name": "seed",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A number. If a seed is given, the result will be the same for the same seed."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 886,
			"name": "randPick",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/rand/randPick.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 887,
					"name": "randPick",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a random set of items from the list.\nIf `seed` is set: Returns a random set of items from the list, based on the numeric seed.",
						"returns": "A list, or a value (if num is set to 1).\n"
					},
					"parameters": [
						{
							"id": 888,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list. The set of items that can be returned."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 889,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer. The number of items to return from the list."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 890,
							"name": "seed",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) A number. If a seed is given, the result will be the same for the same seed."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 835,
			"name": "range",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/list/range.ts",
					"line": 16,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 836,
					"name": "range",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Generates a list of integers, from 0 to `end` (exclusive), with a step size of 1.\nIf `start` has been set: Generates a list of integers, from start (inclusive) to `end` (exclusive), with a step size of 1.\nIf `start` and `step` has been set: Generates a list of integers, from start to end, with a specified step size.\n```\nrange(3)           // [0, 1, 2]\nrange(2, 6)        // [2, 3, 4, 5]\nrange(1, 9, 2)     // [1, 3, 5, 7]\n```",
						"returns": "A list.\n"
					},
					"parameters": [
						{
							"id": 837,
							"name": "start",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "(Optional) An integer. The start of the range, inclusive."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 838,
							"name": "end",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "An integer. The end of the range, exclusive."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 839,
							"name": "step",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) An integer. The step size."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			]
		},
		{
			"id": 900,
			"name": "rayCopy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayCopy.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 901,
					"name": "rayCopy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Make a copy of the ray \"r\".\n\\n\nOverloaded. ray can be one ray or a list of rays.",
						"returns": "A copy of the original ray.\n"
					},
					"parameters": [
						{
							"id": 902,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The original ray to be copied."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 916,
			"name": "rayFromPln",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayFromPln.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 917,
					"name": "rayFromPln",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a ray from a plane \"p\", with the same origin and with a direction along the plane's z axis.\n\\n\nOverloaded. pln can be one plane or a list of planes.",
						"returns": "A ray.\n"
					},
					"parameters": [
						{
							"id": 918,
							"name": "pln",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input plane to create a ray from."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 896,
			"name": "rayFromTo",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayFromTo.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 897,
					"name": "rayFromTo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a ray between two points.\n\\n\nOverloaded with 4 cases.\n\\n\n- xyz1 can be one coordinate, and xyz2 can be one coordinate.\n- xyz1 can be a list of coordinates, and xyz2 can be one coordinate.\n- xyz1 can be one coordinate, and xyz2 can be a list of coordinates.\n- xyz1 can be a list of coordinates, and xyz2 can be a list of coordinates. These lists should have the **same size**.",
						"returns": "The created ray or list of rays that has xyz1 as an origin and xyz2 as an endpoint.\n"
					},
					"parameters": [
						{
							"id": 898,
							"name": "xyz1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Coordinate 1."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 899,
							"name": "xyz2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Coordinate 2."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 923,
			"name": "rayGtoL",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayGtoL.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 924,
					"name": "rayGtoL",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a ray from the global coordinate system to a local coordinate system defined by plane \"p\".\n\\n\nOverloaded with 4 cases.\n\\n\n- r can be one ray, and p can be one plane.\n- r can be a list of rays, and p can be one plane.\n- r can be one ray, and p can be a list of planes.\n- r can be a list of rays, and p can be a list of planes. These lists should have the **same size**.",
						"returns": "A new ray.\n"
					},
					"parameters": [
						{
							"id": 925,
							"name": "r",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be transformed."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 926,
							"name": "p",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The target plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 912,
			"name": "rayLMove",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayLMove.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 913,
					"name": "rayLMove",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Move the ray \"r\" relative to the ray direction vector, by distance \"d\".\n\\n\nOverloaded with 3 cases.\n\\n\n- ray can be one ray, and dist can be one number.\n- ray can be a list of rays, and dist can be one number.\n- ray can be a list of rays, and dist can be a list of numbers. These lists should have the **same size**.",
						"returns": "The new, moved ray.\n"
					},
					"parameters": [
						{
							"id": 914,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be moved."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 915,
							"name": "dist",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The distance to move the ray by."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 919,
			"name": "rayLtoG",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayLtoG.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 920,
					"name": "rayLtoG",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a ray from a local coordinate system defined by plane \"p\" to the global coordinate system.\n\\n\nOverloaded with 4 cases.\n\\n\n- r can be one ray, and p can be one plane.\n- r can be a list of rays, and p can be one plane.\n- r can be one ray, and p can be a list of planes.\n- r can be a list of rays, and p can be a list of planes. These lists should have the **same size**.",
						"returns": "A new ray.\n"
					},
					"parameters": [
						{
							"id": 921,
							"name": "r",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be transformed."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 922,
							"name": "p",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The source plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 891,
			"name": "rayMake",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayMake.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 892,
					"name": "rayMake",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a ray from an origin \"o\" and a direction vector \"d\".\nIf `len` is set: Creates a ray from an origin \"o\", a direction vector \"d\", and length \"l\".\n\\n\nOverloaded with 4 cases.\n\\n\n- origin can be one coordinate, dir can be one plane, and len can be one integer.\n- origin can be a list of coordinates, dir can be one plane, and len can be one integer.\n- origin can be one coordinate, dir can be a list of planes, and len can be one integer.\n- origin can be a list of coordinates, dir can be a list of planes, and len can be one integer. These lists should have the **same size**.",
						"returns": "A new ray.\n"
					},
					"parameters": [
						{
							"id": 893,
							"name": "origin",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Coordinates or a list of coordinates in the form of [x, y, z]."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 894,
							"name": "dir",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A vector or list of vectors that provides the direction."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 895,
							"name": "len",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) An integer for the length."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 903,
			"name": "rayMove",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayMove.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 904,
					"name": "rayMove",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Move the ray \"r\" relative to the global X, Y, and Z axes, by vector \"v\".\n\\n\nOverloaded with 3 cases.\n\\n\n- ray can be one ray, and vec can be one vector.\n- ray can be a list of rays, and vec can be one vector.\n- ray can be a list of rays, and vec can be a list of vectors. These lists should have the **same size**.",
						"returns": "The new, moved ray.\n"
					},
					"parameters": [
						{
							"id": 905,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be moved."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 906,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector to move the ray with."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 907,
			"name": "rayRot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/ray/rayRot.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 908,
					"name": "rayRot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotate the ray \"r1\" around the ray \"r2\", by angle \"a\" (in radians).\n\\n\nOverloaded with 3 cases.\n\\n\n- ray1 can be one ray, ray2 can be one ray, and ang can be one number.\n- ray1 can be a list of rays, ray2 can be one ray, and ang can be one number.\n- ray1 can be a list of rays, ray2 can be a list of rays, and ang can be a list of numbers. These lists should have the **same size**.",
						"returns": "The new, rotated ray.\n"
					},
					"parameters": [
						{
							"id": 909,
							"name": "ray1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be rotated."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 910,
							"name": "ray2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The ray to be used as the axis of rotation."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRay"
										}
									}
								]
							}
						},
						{
							"id": 911,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The angle (in radians) to rotate r1 by."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TRay"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TRay"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 683,
			"name": "remap",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/remap.ts",
					"line": 17,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 684,
					"name": "remap",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Maps a number from the d1 domain to the d2 domain.\n\\n\nThis can be thought of as a percentage.\nThe percentage of num in d1's range is calculated,\nthen used to find the equivalent value for num in d2.\n\\n\n```\nremap(10, [0, 100], [100,200]) // 10 is 10% of 0-100. Hence, 10% of 100-200 is 110.\nremap(40, [20, 80], [0, 30])   // 40 is 33.3% of 20-80. Hence, 33.3% of 0-30 is 10.\n```",
						"returns": "The remapped number.\n"
					},
					"parameters": [
						{
							"id": 685,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The number/integer to be remapped."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 686,
							"name": "d1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of two numbers, representing the first domain."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						},
						{
							"id": 687,
							"name": "d2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list of two numbers, representing the second domain."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 641,
			"name": "round",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/round.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 642,
					"name": "round",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "The value of the given number rounded to the nearest integer.\n```\nround( 20.49); //  20\nround( 20.5 ); //  21\nround( 42   ); //  42\nround(-20.5 ); // -20\nround(-20.51); // -21\n```",
						"returns": "An integer or list of integers.\n"
					},
					"parameters": [
						{
							"id": 643,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 644,
							"name": "dec_pla",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer. Set as 0 by default."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 938,
			"name": "setDif",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/set/setDif.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 939,
					"name": "setDif",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list of unique items from the difference of the two input lists.\nThe new list contains every element in list 1 that is not in list 2.",
						"returns": "A new list with no repeated values.\n"
					},
					"parameters": [
						{
							"id": 940,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 941,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 934,
			"name": "setInt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/set/setInt.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 935,
					"name": "setInt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list of unique items from the intersection of the two input lists.",
						"returns": "A new list with no repeated values.\n"
					},
					"parameters": [
						{
							"id": 936,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 937,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 927,
			"name": "setMake",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/set/setMake.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 928,
					"name": "setMake",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list of unique items from the input list.\n\\n\n- `setMake([1,1,1,2,2,3])`          // returns [1,2,3]",
						"returns": "A new list with no repeated values.\n"
					},
					"parameters": [
						{
							"id": 929,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 930,
			"name": "setUni",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/set/setUni.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 931,
					"name": "setUni",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a new list of unique items from the union of the two input lists.",
						"returns": "A new list with no repeated values.\n"
					},
					"parameters": [
						{
							"id": 932,
							"name": "list1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 933,
							"name": "list2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second list."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 645,
			"name": "sigFig",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/sigFig.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 646,
					"name": "sigFig",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the value of the given number converted to the specified number of significant figures.",
						"returns": "A number.\n"
					},
					"parameters": [
						{
							"id": 647,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						},
						{
							"id": 648,
							"name": "sig_figs",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer. The number of significant figures."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1012,
			"name": "sin",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/sin.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1013,
					"name": "sin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the sine of the given number.\n\\n\n```\nsin(0);           // 0\nsin(PI/2);        // 1\n```",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1014,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1018,
			"name": "sinh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/sinh.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1019,
					"name": "sinh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic sine (in radians) of the given number.\n\\n\n```\nsinh(0); // 0\nsinh(1); // 1.1752011936438014\n```",
						"returns": "A number or list of numbers (in radians).\n"
					},
					"parameters": [
						{
							"id": 1020,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 629,
			"name": "sqrt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/sqrt.ts",
					"line": 17,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 630,
					"name": "sqrt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the square root of the given number. If the number is negative, NaN is returned.\n\\n\n```\nsqrt(9); // 3\nsqrt(2); // 1.414213562373095",
						"text": "sqrt(1);  // 1\nsqrt(0);  // 0\nsqrt(-1); // NaN\nsqrt(-0); // -0\n```\n",
						"returns": "A number, NaN, or a list of numbers.\n"
					},
					"parameters": [
						{
							"id": 631,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 619,
			"name": "square",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/square.ts",
					"line": 17,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 620,
					"name": "square",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the square of the number.\n\\n\nIf the input is a list, the result will also be a list.\n\\n\n```\nsquare([1, 2, 3, 4])    // [1, 4, 9, 16]\nsquare(5)               // 25\n```",
						"returns": "A number or a list containing numbers.\n\n"
					},
					"parameters": [
						{
							"id": 621,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or a list containing numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 960,
			"name": "std",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/std.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 961,
					"name": "std",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the standard deviation of the list.\nBy default, the sum of squared errors is divided by (n - 1).\n\\n\n```\nstd([2, 4, 6])             // returns 2\nstd([2, 4, 6, 8])          // returns 2.581988897471611\n```",
						"returns": "A number (The standard deviation).\n"
					},
					"parameters": [
						{
							"id": 962,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 1005,
			"name": "strEnds",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strEnds.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1006,
					"name": "strEnds",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the string s1 ends with s2, false otherwise.\n\\n\nOverloaded with 2 cases.\n\\n\n- str can be one string and ends can be one string.\n- str can be a list of strings and ends can be one string.",
						"returns": "True or False.\n\n"
					},
					"parameters": [
						{
							"id": 1007,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string or list of strings, \"s1\"."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1008,
							"name": "ends",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string, \"s2\"."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 974,
			"name": "strLow",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strLow.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 975,
					"name": "strLow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts all the alphabetic characters in a string to lowercase.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified lowercase string.\n"
					},
					"parameters": [
						{
							"id": 976,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string, or list of input strings."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 986,
			"name": "strPadL",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strPadL.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 987,
					"name": "strPadL",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pads the start of the s1 string with white spaces so that the resulting string reaches a given length.\nIf `fill/s2` has been set: Pads the start of the s1 string with the s2 string so that the resulting string reaches a given length.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 988,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\"s1\", Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 989,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer (the desired length)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 990,
							"name": "fill",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) \"s2\", The string to pad the input string with, starting from the left of s1."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 991,
			"name": "strPadR",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strPadR.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 992,
					"name": "strPadR",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pads the end of the s1 string with white spaces so that the resulting string reaches a given length.\nIf `fill/s2` has been set: Pads the end of the s1 string with the s2 string so that the resulting string reaches a given length.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 993,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "\"s1\", Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 994,
							"name": "max",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer (the desired length)."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 995,
							"name": "fill",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) \"s2\", The string to pad the input string with, starting from the right of s1."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 966,
			"name": "strRepl",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strRepl.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 967,
					"name": "strRepl",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Replace all instances of specified search string with a new string. The search string can be a regular expression.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 968,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "String to search through and modify."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 969,
							"name": "search_str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "String to search for and replace."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 970,
							"name": "new_str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "New string to replace search\\_str."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1001,
			"name": "strStarts",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strStarts.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1002,
					"name": "strStarts",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the string s1 starts with s2, false otherwise.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1003,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string, \"s1\"."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1004,
							"name": "starts",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string, \"s2\"."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 996,
			"name": "strSub",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strSub.ts",
					"line": 11,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 997,
					"name": "strSub",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets a substring beginning at the specified index and ending at the end of the string.\nIf `length` is set: Gets a substring beginning at the specified index and having the specified length.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 998,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 999,
							"name": "from",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "An integer corresponding to the starting index."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1000,
							"name": "length",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "(Optional) An integer for the specified length."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1009,
			"name": "strToJSON",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strToJSON.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1010,
					"name": "strToJSON",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a JSON object parsed from an input string.\n\\n\n<a href =\"https://www.w3schools.com/js/js_json_objects.asp\" target=\"_blank\">See w3schools for more info on JSON objects. </a>\n\\n\n```\nstrToJSON(\"{\\\"name\\\":\\\"John\\\",\\\"age\\\":\\\"30\\\"}\")   \n```\n\\\\ returns {\"<b>name</b>\": \"John\", \"<b>age</b>\": \"30\"}",
						"returns": "A JSON object.\n"
					},
					"parameters": [
						{
							"id": 1011,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 977,
			"name": "strTrim",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strTrim.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 978,
					"name": "strTrim",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes the leading and trailing white space and line terminator characters from a string.\nFor example, \\ is considered a line terminator character.\n```\nstrTrim(\"This\\ is a \\sentence\")                \\\\ \"This is a sentence\" \nstrTrim(\"   This used to have whitespace   \")  \\\\ \"This used to have whitespace\"\n```\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 979,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 983,
			"name": "strTrimL",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strTrimL.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 984,
					"name": "strTrimL",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes whitespace from the left end of a string.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 985,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 980,
			"name": "strTrimR",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strTrimR.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 981,
					"name": "strTrimR",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Removes whitespace from the right end of a string.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified string.\n"
					},
					"parameters": [
						{
							"id": 982,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 971,
			"name": "strUpp",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/strs/strUpp.ts",
					"line": 8,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 972,
					"name": "strUpp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Converts all the alphabetic characters in a string to uppercase.\n\\n\nOverloaded. str can be one string or a list of strings.",
						"returns": "The modified uppercase string.\n"
					},
					"parameters": [
						{
							"id": 973,
							"name": "str",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "Input string."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 708,
			"name": "string",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/conversion/string.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 709,
					"name": "string",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a string or convert any object into a string.\nElements of Arrays and Matrices are processed element wise.",
						"returns": "A string/strings.\n"
					},
					"parameters": [
						{
							"id": 710,
							"name": "val",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A value of any type."
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 655,
			"name": "sum",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/arithmetic/sum.ts",
					"line": 9,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 656,
					"name": "sum",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the sum of all values in a list.",
						"returns": "A number (The sum).\n"
					},
					"parameters": [
						{
							"id": 657,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 1036,
			"name": "tan",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/tan.ts",
					"line": 10,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1037,
					"name": "tan",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the tangent of the given number.\n\\n\n```\ntan(1); // 1.5574077246549023\n```",
						"returns": "A number.\n"
					},
					"parameters": [
						{
							"id": 1038,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1045,
			"name": "tanh",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/trigonometry/tanh.ts",
					"line": 12,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1046,
					"name": "tanh",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the hyperbolic tangent of the given number.\n\\n\n```\ntanh(0);        // 0\ntanh(Infinity); // 1\ntanh(1);        // 0.7615941559557649\n```",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1047,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 963,
			"name": "vari",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/statistics/vari.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 964,
					"name": "vari",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the variance of the list.\nBy default, the sum of squared errors is divided by (n - 1).\n\\n\n```\nvari([2, 4, 6])     \\\\ 4\nvari([2, 4, 6, 8])  \\\\ 6.666666666666667\n```",
						"returns": "A number (The variance).\n"
					},
					"parameters": [
						{
							"id": 965,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A list containing numbers."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 1110,
			"name": "vecAdd",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecAdd.ts",
					"line": 22,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1111,
					"name": "vecAdd",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Adds two vectors. If more vectors need to be added at once, use `vecSum`.\n\\n\nOverloaded with 4 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be one vector.\n- v1 can be one vector, and v2 can be a list of vectors.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "The result vector.\n\n"
					},
					"parameters": [
						{
							"id": 1112,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1113,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1114,
							"name": "norm",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "True or False: Normalize the resulting vector."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1140,
			"name": "vecAng",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecAng.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1141,
					"name": "vecAng",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculate the angle (0 to PI) between two vectors.\n\\n\nThe inner (smaller) angle is always returned, which will always be smaller than or equal to PI.\n\\n\nOverloaded with 4 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be one vector.\n- v1 can be one vector, and v2 can be a list of vectors.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "An angle in radians.\n"
					},
					"parameters": [
						{
							"id": 1142,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1143,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1153,
			"name": "vecAng2",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecAng2.ts",
					"line": 34,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1154,
					"name": "vecAng2",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculate the angle (0 to 2PI) between two vectors, relative to the plane normal.\n\\n\nUnlike the vecAng() function, this funtion may return an angle larger than PI.\n\\n\nThe function calculates the angle from the first vector to the second vector\nin a counter-clockwise direction, assuming the normal is pointing up towards the viewer.\n\\n\nOverloaded with 8 cases.\n\\n\n- All single inputs\n     - v1 can be one vector, v2 can be one vector, and v3 can be one vector.\n- Two single inputs, one list\n     - v1 can be a list of vectors, v2 can be one vector, and v3 can be one vector.\n     - v1 can be one vector, v2 can be a list of vectors, and v3 can be one vector.\n     - v1 can be one vector, v2 can be one vector, and v3 can be a list of vectors.\n- One single input, two lists\n     - v1 can be a list of vectors, v2 can be a list of vectors, and v3 can be one vector. These lists should have the **same length**.\n     - v1 can be a list of vectors, v2 can be one vector, and v3 be a list of vectors. These lists should have the **same length**.\n     - v1 can be one vector, v2 can be a list of vectors, and v3 can be a list of vectors. These lists should have the **same length**.\n- All lists\n     - v1 can be a list of vectors, v2 can be a list of vectors, and v3 can be a list of vectors. All lists should have the **same length**.",
						"returns": "The angle, in radians.\n"
					},
					"parameters": [
						{
							"id": 1155,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1156,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1157,
							"name": "v3",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A normal vector or a list of normal vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1104,
			"name": "vecAvg",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecAvg.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1105,
					"name": "vecAvg",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the average vector given a list of vectors.\n\\n\nThe input vectors and resulting average vector are all normalised.\n\\n\nThe function can be called in two ways:\n`vec = vecAvg([vec1, vec2, vec3])`\n`vec = vecAvg(vec1, vec2, vec3)`\n\\n",
						"returns": "The average vector.\n"
					},
					"parameters": [
						{
							"id": 1106,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"shortText": "A list of vectors or just multiple vectors."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					}
				}
			]
		},
		{
			"id": 1107,
			"name": "vecAvgDir",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecAvgDir.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1108,
					"name": "vecAvgDir",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates a normalised vector with a direction that is the average of the directions of the input vectors.\n\\n\nThe result is equivalent to:\n`vec = vecNorm(vecSum(vecNorm(v)))`\n\\n\nNote that if the input vectors cancel each other out, the result will be `[0,0,0]`.\n\\n\nThe function can be called in two ways:\n`vec = vecAvgDir([vec1, vec2, vec3])`\n`vec = vecAvgDir(vec1, vec2, vec3)`\n\\n",
						"returns": "The result vector.\n"
					},
					"parameters": [
						{
							"id": 1109,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"shortText": "A list of input vectors or just multiple vectors."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					}
				}
			]
		},
		{
			"id": 1136,
			"name": "vecCross",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecCross.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1137,
					"name": "vecCross",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the cross product of two vectors.\n\\n\nOverloaded with 4 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be one vector.\n- v1 can be one vector, and v2 can be a list of vectors.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "The resultant cross product, a list of 3 numbers.\n"
					},
					"parameters": [
						{
							"id": 1138,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1139,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1120,
			"name": "vecDiv",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecDiv.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1121,
					"name": "vecDiv",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Divides a vector by a number.\n\\n\nOverloaded with 4 cases.\n\\n\n- v can be one vector, and num can be one number.\n- v can be a list of vectors, and num can be one number.\n- v can be one vector, and num can be a list of numbers.\n- v can be a list of vectors, and num can be a list of numbers. These lists should have the **same size**.",
						"returns": "The result vector.\n\n"
					},
					"parameters": [
						{
							"id": 1122,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1123,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (to divide the vector by)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1132,
			"name": "vecDot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecDot.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1133,
					"name": "vecDot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the dot product of two vectors.\n\\n\nOverloaded with 4 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be one vector.\n- v1 can be one vector, and v2 can be a list of vectors.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "The number, the result dot product.\n"
					},
					"parameters": [
						{
							"id": 1134,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1135,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1148,
			"name": "vecEqual",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecEqual.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1149,
					"name": "vecEqual",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns true if the difference between two vectors is smaller than a specified tolerance.\n\\n\nOverloaded with 2 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "True or False.\n"
					},
					"parameters": [
						{
							"id": 1150,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1151,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1152,
							"name": "tol",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number to specify the tolerance."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1144,
			"name": "vecFromTo",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecFromTo.ts",
					"line": 20,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1145,
					"name": "vecFromTo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a vector between two points.\n\\n\nOverloaded with 4 cases.\n\\n\n- xyz1 can be one coordinate, and xyz2 can be one coordinate.\n- xyz1 can be a list of coordinates, and xyz2 can be one coordinate.\n- xyz1 can be one coordinate, and xyz2 can be a list of coordinates.\n- xyz1 can be a list of coordinates, and xyz2 can be a list of coordinates. These lists should have the **same size**.",
						"returns": "The new vector.\n"
					},
					"parameters": [
						{
							"id": 1146,
							"name": "xyz1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first point or list of points."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1147,
							"name": "xyz2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second point or list of points."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1176,
			"name": "vecGtoL",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecGtoL.ts",
					"line": 18,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1177,
					"name": "vecGtoL",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a vector from the global coordinate system to a local coordinate system defined by plane \"p\".\n\\n\nOverloaded with 4 cases.\n\\n\n- v can be one vector, and p can be one plane.\n- v can be a list of vectors, and p can be one plane.\n- v can be one vector, and p can be a list of planes.\n- v can be a list of vectors, and p can be a list of planes. These lists should have the **same size**.",
						"returns": "A new vector or list of new vectors.\n"
					},
					"parameters": [
						{
							"id": 1178,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector or list of vectors to be transformed."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1179,
							"name": "p",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The target plane or list of planes."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1163,
			"name": "vecLen",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecLen.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1164,
					"name": "vecLen",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the magnitude of a vector.\n\\n\nOverloaded. v can be one vector or a list of vectors.",
						"returns": "A number or list of numbers.\n"
					},
					"parameters": [
						{
							"id": 1165,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1172,
			"name": "vecLtoG",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecLtoG.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1173,
					"name": "vecLtoG",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a vector from a local coordinate system defined by plane \"p\" to the global coordinate system.\n\\n\nOverloaded with 4 cases.\n\\n\n- v can be one vector, and p can be one plane.\n- v can be a list of vectors, and p can be one plane.\n- v can be one vector, and p can be a list of planes.\n- v can be a list of vectors, and p can be a list of planes. These lists should have the **same size**.",
						"returns": "A new vector or list of new vectors.\n"
					},
					"parameters": [
						{
							"id": 1174,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector to be transformed."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1175,
							"name": "p",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The source plane."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TPlane"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1124,
			"name": "vecMult",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecMult.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1125,
					"name": "vecMult",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Multiplies a vector by a number.\n\\n\nOverloaded with 4 cases.\n\\n\n- v can be one vector, and num can be one number.\n- v can be a list of vectors, and num can be one number.\n- v can be one vector, and num can be a list of numbers.\n- v can be a list of vectors, and num can be a list of numbers. These lists should have the **same size**.",
						"returns": "The result vector.\n"
					},
					"parameters": [
						{
							"id": 1126,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1127,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers (to multiply the vector by)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1166,
			"name": "vecNorm",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecNorm.ts",
					"line": 13,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1167,
					"name": "vecNorm",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Sets the magnitude of a vector to 1.\n\\n\nOverloaded. v can be one vector or a list of vectors.",
						"returns": "A new vector or list of new vectors(with a magnitude of 1).\n"
					},
					"parameters": [
						{
							"id": 1168,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1169,
			"name": "vecRev",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecRev.ts",
					"line": 14,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1170,
					"name": "vecRev",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Reverses the direction of a vector.\n\\n\nOverloaded. v can be one vector or a list of vectors.",
						"returns": "A new vector or list of new vectors.\n"
					},
					"parameters": [
						{
							"id": 1171,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1158,
			"name": "vecRot",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecRot.ts",
					"line": 29,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1159,
					"name": "vecRot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Rotates one vector around another vector by a specified angle (in radians).\n\\n\nOverloaded with 8 cases.\n\\n\n- All single inputs\n     - v1 can be one vector, v2 can be one vector, and ang can be one number.\n- Two single inputs, one list\n     - v1 can be a list of vectors, v2 can be one vector, and ang can be one number.\n     - v1 can be one vector, v2 can be a list of vectors, and ang can be one number.\n     - v1 can be one vector, v2 can be one vector, and ang can be a list of numbers.\n- One single input, two lists\n     - v1 can be a list of vectors, v2 can be a list of vectors, and ang can be one number. These lists should have the **same length**.\n     - v1 can be a list of vectors, v2 can be one vector, and ang be a list of numbers. These lists should have the **same length**.\n     - v1 can be one vector, v2 can be a list of vectors, and ang can be a list of numbers. These lists should have the **same length**.\n- All lists\n     - v1 can be a list of vectors, v2 can be a list of vectors, and ang can be a list of numbers. All lists should have the **same length**.",
						"returns": "The new vector.\n"
					},
					"parameters": [
						{
							"id": 1160,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The first vector or list of vectors to be rotated."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1161,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The second vector or list of vectors for v1 to rotate around."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1162,
							"name": "ang",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The angle or list of angles to rotate v1 by (in radians)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1128,
			"name": "vecSetLen",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecSetLen.ts",
					"line": 19,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1129,
					"name": "vecSetLen",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Sets the magnitude of a vector.\n\\n\nOverloaded with 4 cases.\n\\n\n- v can be one vector, and num can be one number.\n- v can be a list of vectors, and num can be one number.\n- v can be one vector, and num can be a list of numbers.\n- v can be a list of vectors, and num can be a list of numbers. These lists should have the **same size**.",
						"returns": "The result vector or a list of result vectors.\n"
					},
					"parameters": [
						{
							"id": 1130,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The input vector or list of vectors. (It can have no set magnitude or have its current one be overwritten)."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1131,
							"name": "num",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A number or list of numbers for the new magnitude of v."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1115,
			"name": "vecSub",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecSub.ts",
					"line": 21,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1116,
					"name": "vecSub",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Subtracts v2 from v1.\n\\n\nOverloaded with 4 cases.\n\\n\n- v1 can be one vector, and v2 can be one vector.\n- v1 can be a list of vectors, and v2 can be one vector.\n- v1 can be one vector, and v2 can be a list of vectors.\n- v1 can be a list of vectors, and v2 can be a list of vectors. These lists should have the **same size**.",
						"returns": "The result vector.\n"
					},
					"parameters": [
						{
							"id": 1117,
							"name": "v1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector or list of vectors to be subtracted from."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1118,
							"name": "v2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The vector or list of vectors to subtract by. (Is unmodified by the expression.)"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Txyz"
										}
									}
								]
							}
						},
						{
							"id": 1119,
							"name": "norm",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "True or False: Normalize the resulting vector."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Txyz"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 1101,
			"name": "vecSum",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "inline/vec/vecSum.ts",
					"line": 15,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 1102,
					"name": "vecSum",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Add multiple vectors. If only two vectors need to be added, `vecAdd` can be used.\n\\n\nThe function can be called in two ways:\n`vec = vecSum([vec1, vec2, vec3])`\n`vec = vecSum(vec1, vec2, vec3)`\n\\n",
						"returns": "The result vector.\n"
					},
					"parameters": [
						{
							"id": 1103,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"shortText": "A list of vectors or just multiple vectors."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Txyz"
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "Txyz"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				1
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				614,
				600,
				615,
				611,
				612,
				613,
				610,
				607,
				608,
				609,
				601,
				602,
				603,
				604,
				605,
				606
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				1096,
				616,
				1027,
				1033,
				1015,
				1021,
				1039,
				1042,
				1048,
				702,
				649,
				688,
				699,
				693,
				1180,
				1024,
				1030,
				622,
				714,
				749,
				752,
				745,
				727,
				737,
				741,
				731,
				734,
				766,
				770,
				774,
				1184,
				632,
				652,
				1193,
				661,
				756,
				668,
				1060,
				1078,
				1069,
				1057,
				673,
				1054,
				1066,
				1087,
				1090,
				1051,
				1084,
				1081,
				1063,
				1093,
				1072,
				1075,
				678,
				1189,
				778,
				781,
				785,
				789,
				793,
				797,
				801,
				805,
				809,
				812,
				816,
				819,
				823,
				828,
				832,
				635,
				638,
				948,
				945,
				951,
				954,
				942,
				957,
				664,
				722,
				717,
				705,
				845,
				873,
				857,
				861,
				865,
				869,
				840,
				848,
				852,
				625,
				658,
				761,
				711,
				876,
				881,
				886,
				835,
				900,
				916,
				896,
				923,
				912,
				919,
				891,
				903,
				907,
				683,
				641,
				938,
				934,
				927,
				930,
				645,
				1012,
				1018,
				629,
				619,
				960,
				1005,
				974,
				986,
				991,
				966,
				1001,
				996,
				1009,
				977,
				983,
				980,
				971,
				708,
				655,
				1036,
				1045,
				963,
				1110,
				1140,
				1153,
				1104,
				1107,
				1136,
				1120,
				1132,
				1148,
				1144,
				1176,
				1163,
				1172,
				1124,
				1166,
				1169,
				1158,
				1128,
				1115,
				1101
			]
		}
	],
	"sources": [
		{
			"fileName": "index.ts",
			"line": 1,
			"character": 0
		}
	]
}